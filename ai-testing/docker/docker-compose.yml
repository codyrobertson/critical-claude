# AI TESTING ORCHESTRATION - Claude + Critical Claude Integration
version: '3.8'

services:
  ai-testing-environment:
    build:
      context: ../../
      dockerfile: ai-testing/docker/Dockerfile.simple
    container_name: critical-claude-ai-testing
    environment:
      # Claude API Configuration
      - CLAUDE_API_KEY=${CLAUDE_API_KEY:-}
      - CLAUDE_MODEL=claude-3-5-sonnet-20241022
      - CLAUDE_TEMPERATURE=0.0
      - CLAUDE_MAX_TOKENS=4096
      
      # Testing Configuration
      - TESTING_MODE=true
      - VALIDATION_STRICT=true
      - ZERO_SHOT_REQUIRED=true
      - AUTO_INJECT_PROMPTS=true
      
      # Critical Claude Configuration
      - CC_HOME=/home/aitest/.critical-claude
      - CC_LOG_LEVEL=info
      - CC_ANALYTICS=false
      
      # Performance Settings
      - NODE_ENV=testing
      - NODE_OPTIONS="--max-old-space-size=2048"
    
    volumes:
      # Mount test results for external access
      - ai-test-results:/home/aitest/ai-tests/results
      - ai-test-logs:/home/aitest/.claude/validation-logs
      
      # Optional: Mount external test scenarios
      - ${PWD}/ai-testing/scenarios:/home/aitest/ai-tests/external-scenarios:ro
    
    working_dir: /home/aitest
    
    # Resource limits for consistent testing
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    
    # Restart policy for long-running tests
    restart: unless-stopped
    
    # Network configuration
    networks:
      - ai-testing-network
    
    # Health monitoring
    healthcheck:
      test: ["CMD", "cc", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # Labels for Docker management
    labels:
      - "ai-testing.service=critical-claude"
      - "ai-testing.type=adherence-validation"
      - "ai-testing.framework=0-shot-learning"

  # Optional: Results viewer service
  results-viewer:
    image: nginx:alpine
    container_name: ai-testing-viewer
    ports:
      - "8080:80"
    volumes:
      - ai-test-results:/usr/share/nginx/html/results:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - ai-testing-environment
    networks:
      - ai-testing-network
    labels:
      - "ai-testing.service=results-viewer"

  # Optional: Log aggregation service
  log-aggregator:
    image: fluent/fluent-bit:latest
    container_name: ai-testing-logs
    volumes:
      - ai-test-logs:/var/log/ai-testing:ro
      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    depends_on:
      - ai-testing-environment
    networks:
      - ai-testing-network
    labels:
      - "ai-testing.service=log-aggregator"

volumes:
  ai-test-results:
    driver: local
    labels:
      - "ai-testing.data=results"
  
  ai-test-logs:
    driver: local
    labels:
      - "ai-testing.data=logs"

networks:
  ai-testing-network:
    driver: bridge
    labels:
      - "ai-testing.network=main"
/**
 * Common Task Interface - Unified type for all task management systems
 * Provides consistent API across the entire unified task system
 */
export type TaskStatus = 'todo' | 'in_progress' | 'done' | 'blocked' | 'archived';
export type TaskPriority = 'critical' | 'high' | 'medium' | 'low';
export interface TaskDependency {
    from: string;
    to: string;
    type: 'prerequisite' | 'blocks' | 'related';
    createdAt: string;
}
export interface CommonTask {
    id: string;
    title: string;
    description?: string;
    status: TaskStatus;
    priority: TaskPriority;
    createdAt: string;
    updatedAt: string;
    archivedAt?: string;
    assignee?: string;
    labels: string[];
    sprintId?: string;
    epicId?: string;
    phaseId?: string;
    storyPoints?: number;
    estimatedHours?: number;
    actualHours?: number;
    dependencies?: string[];
    blockedBy?: string[];
    parentId?: string;
    childTasks?: string[];
    aiGenerated?: boolean;
    aiExpandable?: boolean;
    autoGeneratedDependencies?: boolean;
    aiEstimation?: {
        storyPoints: number;
        estimatedHours: number;
        complexity: 'low' | 'medium' | 'high' | 'very-high';
        confidence: number;
        factors: string[];
    };
    claudeCodeSynced?: boolean;
    lastSyncedAt?: string;
    draft?: boolean;
    external?: boolean;
    source?: 'manual' | 'ai' | 'ai-generation' | 'ai-expansion' | 'import' | 'claude-code';
}
export interface CreateTaskInput {
    title: string;
    description?: string;
    priority?: TaskPriority;
    status?: TaskStatus;
    assignee?: string;
    labels?: string[];
    sprintId?: string;
    epicId?: string;
    phaseId?: string;
    storyPoints?: number;
    estimatedHours?: number;
    dependencies?: string[];
    parentId?: string;
    draft?: boolean;
    aiGenerated?: boolean;
    source?: 'manual' | 'ai' | 'ai-generation' | 'ai-expansion' | 'import' | 'claude-code';
}
export interface UpdateTaskInput {
    id: string;
    title?: string;
    description?: string;
    priority?: TaskPriority;
    status?: TaskStatus;
    assignee?: string;
    labels?: string[];
    sprintId?: string;
    epicId?: string;
    phaseId?: string;
    storyPoints?: number;
    estimatedHours?: number;
    actualHours?: number;
    dependencies?: string[];
    blockedBy?: string[];
    parentId?: string;
    childTasks?: string[];
    aiEstimation?: {
        storyPoints: number;
        estimatedHours: number;
        complexity: 'low' | 'medium' | 'high' | 'very-high';
        confidence: number;
        factors: string[];
    };
}
export interface TaskFilter {
    status?: TaskStatus | TaskStatus[];
    priority?: TaskPriority | TaskPriority[];
    assignee?: string;
    labels?: string[];
    sprintId?: string;
    epicId?: string;
    phaseId?: string;
    includeDrafts?: boolean;
    includeArchived?: boolean;
    aiGenerated?: boolean;
    claudeCodeSynced?: boolean;
}
export interface TaskListOptions {
    filter?: TaskFilter;
    limit?: number;
    offset?: number;
    sortBy?: 'createdAt' | 'updatedAt' | 'priority' | 'title' | 'status';
    sortOrder?: 'asc' | 'desc';
    plain?: boolean;
}
export interface MCPSimpleTask {
    id: string;
    title: string;
    description: string;
    status: string;
    priority: string;
    assignee: string;
    labels: string[];
    createdAt: string;
    updatedAt: string;
}
export interface SimpleManagerTask {
    id: string;
    title: string;
    description?: string;
    status: TaskStatus;
    priority: TaskPriority;
    assignee?: string;
    labels: string[];
    createdAt: string;
    updatedAt: string;
    archived?: boolean;
}
export declare function isMCPSimpleTask(task: any): task is MCPSimpleTask;
export declare function isSimpleManagerTask(task: any): task is SimpleManagerTask;
export declare function toCommonTask(task: MCPSimpleTask | SimpleManagerTask): CommonTask;
//# sourceMappingURL=common-task.d.ts.map
/**
 * MCP Client for Critical Claude CLI
 * Connects to the Critical Claude MCP server for AI-powered task management
 */
export interface MCPResponse {
    success: boolean;
    content: Array<{
        type: string;
        text: string;
    }>;
    data?: any;
    message?: string;
}
export declare class MCPClient {
    private client;
    private transport;
    private mcpProcess;
    private mcpServerPath;
    constructor();
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    callTool(toolName: string, args: Record<string, any>): Promise<MCPResponse>;
    listTasks(options?: {
        status?: string;
        assignee?: string;
        labels?: string[];
        includeDrafts?: boolean;
        plain?: boolean;
    }): Promise<MCPResponse>;
    createTask(options: {
        title: string;
        description?: string;
        priority?: string;
        assignee?: string;
        labels?: string[];
        status?: string;
        draft?: boolean;
    }): Promise<MCPResponse>;
    viewTask(id: string, plain?: boolean): Promise<MCPResponse>;
    updateTask(id: string, updates: Record<string, any>): Promise<MCPResponse>;
    archiveTask(id: string): Promise<MCPResponse>;
    showBoard(): Promise<MCPResponse>;
    exportBoard(outputPath?: string, force?: boolean): Promise<MCPResponse>;
    aiCreateFromText(text: string, options?: {
        projectContext?: string;
        expandLevel?: number;
        autoGenerateDependencies?: boolean;
    }): Promise<MCPResponse>;
    aiCreateFromFile(filePath: string, options?: {
        projectContext?: string;
        expandLevel?: number;
        autoGenerateDependencies?: boolean;
    }): Promise<MCPResponse>;
    aiExpandTask(parentId: string, options?: {
        projectContext?: string;
        expandLevel?: number;
    }): Promise<MCPResponse>;
    aiAnalyzeDependencies(taskId?: string): Promise<MCPResponse>;
    initializeTaskSystem(): Promise<MCPResponse>;
}
/**
 * Singleton MCP client instance with auto-connection
 */
export declare class MCPClientManager {
    private static instance;
    private static connected;
    static getClient(): Promise<MCPClient>;
    static cleanup(): Promise<void>;
}
//# sourceMappingURL=mcp-client.d.ts.map
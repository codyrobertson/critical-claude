{
  "brand": {
    "name": "Critical Claude",
    "tagline": "Working code beats perfect theory",
    "mission": "Brutal honesty for better code - preventing 3 AM production disasters",
    "personality": "battle-tested senior engineer who's survived real production failures"
  },
  "context_engineering": {
    "who": {
      "primary_audience": "Vibe coders, junior devs, and developers using AI assistance",
      "secondary_audience": "Anyone who wants to make better AI-assisted code that works",
      "persona": "Developers who want their AI-generated code to actually work in production"
    },
    "why": {
      "core_problem": "Code reviews focus on theoretical perfection instead of production reality",
      "pain_points": [
        "Friday deploy disasters",
        "3 AM production outages",
        "Over-engineered solutions that break",
        "Technical debt from 'perfect' abstractions"
      ],
      "value_proposition": "Pragmatic code analysis that prevents real problems"
    },
    "what": {
      "key_features": [
        "Brutal but pragmatic code reviews",
        "Architecture analysis that matches problem size",
        "AI-powered AGILE task management",
        "Timeline generation with brutal reality checks",
        "MCP integration for Claude Code"
      ],
      "proof_points": [
        "Schema sanitization fixes for Claude CLI",
        "73 story point Cloudflare deployment plan",
        "Production-ready MCP server architecture",
        "Battle-tested from real enterprise experience"
      ]
    },
    "how": {
      "tone": "Brutal but constructive - like a senior engineer who's seen it all",
      "style": "Direct, no-BS, practical advice with real-world examples",
      "format": "Tweet threads with code examples and practical insights"
    }
  },
  "content_themes": {
    "brutal_reality": {
      "description": "Calling out the gap between theory and production reality",
      "examples": [
        "Your 'clean code' principles won't save you from a Friday deploy",
        "SOLID principles don't prevent production outages",
        "That beautiful abstraction just created technical debt"
      ]
    },
    "production_wisdom": {
      "description": "Hard-learned lessons from production failures",
      "examples": [
        "Why working code beats perfect code",
        "The 3 AM debugging prevention checklist",
        "How to review code that survives production"
      ]
    },
    "pragmatic_architecture": {
      "description": "Right-sized solutions for real problems",
      "examples": [
        "When NOT to use microservices",
        "CLI tools don't need dependency injection",
        "Context matters - a startup isn't Netflix"
      ]
    }
  },
  "tweet_templates": {
    "launch_announcement": {
      "context": "ROLE: Act as a battle-tested senior engineer announcing a pragmatic code analysis tool.\n\nOBJECTIVE: Help me craft a tweet thread announcing Critical Claude that resonates with developers who've experienced production pain.\n\nCONTEXT PACKAGE:\nAudience: Senior developers and tech leads who've been burned by production issues\nVoice and tone: Direct, experienced, slightly sarcastic but helpful\nLength target: 5-7 tweet thread\nKey facts: Working code beats perfect theory, prevents 3 AM debugging, battle-tested from real production experience\nConstraints: No marketing fluff, focus on real problems solved\n\nOUTPUT FORMAT: Twitter thread with tweet numbers and character counts",
      "prompt": "üî• Just shipped Critical Claude - because your code needs to survive production, not just pass peer review.\n\nWorking code beats perfect theory. Thread üßµ"
    },
    "feature_showcase": {
      "context": "ROLE: Act as a technical educator showcasing practical development tools.\n\nOBJECTIVE: Create engaging tweets about specific Critical Claude features that solve real development problems.\n\nCONTEXT PACKAGE:\nAudience: Developers looking for practical tools to improve their workflow\nVoice and tone: Educational but not preachy, practical examples\nLength target: 2-3 tweet thread with code examples\nKey facts: Specific feature capabilities, real-world use cases\nConstraints: Include actual code examples or CLI commands\n\nOUTPUT FORMAT: Tweet thread with code blocks and clear examples"
    },
    "brutal_wisdom": {
      "context": "ROLE: Act as a senior engineer sharing hard-learned production lessons.\n\nOBJECTIVE: Share pragmatic development wisdom that prevents common production failures.\n\nCONTEXT PACKAGE:\nAudience: Developers at all levels who want to avoid production pain\nVoice and tone: Brutally honest but constructive, experienced mentor\nLength target: 3-5 tweet thread\nKey facts: Real production scenarios, specific technical advice\nConstraints: No theoretical advice, only battle-tested practices\n\nOUTPUT FORMAT: Tweet thread with specific examples and actionable advice"
    }
  },
  "launch_content": {
    "hero_tweet": {
      "text": "üî• Critical Claude is live!\n\nWorking code beats perfect theory.\n\nAfter years of 3 AM production disasters, I built the code review tool I wish I had:\n\n‚Ä¢ Brutal but pragmatic feedback\n‚Ä¢ Architecture that matches problem size  \n‚Ä¢ AI-powered AGILE management\n‚Ä¢ MCP integration for Claude Code\n\nReal problems only. üßµ",
      "thread": [
        "Why another code review tool?\n\nBecause I'm tired of 'perfect' code that breaks in production.\n\nYour SOLID principles won't save you from a Friday deploy disaster.\n\nCritical Claude focuses on what actually matters: code that survives production.",
        "Key features that actually matter:\n\n‚úÖ Brutal code reviews (finds REAL problems)\n‚úÖ Architecture analysis (right-sized for your team)\n‚úÖ Timeline generation (with reality checks)\n‚úÖ AGILE task management (AI-powered)\n‚úÖ Claude Code integration (MCP server)",
        "The philosophy is simple:\n\n‚ùå Theoretical perfection\n‚úÖ Production reality\n\n‚ùå Over-engineered abstractions  \n‚úÖ Working solutions\n\n‚ùå 'Clean code' dogma\n‚úÖ Code that ships and survives",
        "Built this after surviving:\n‚Ä¢ Startup death spirals from tech debt\n‚Ä¢ 3 AM outages affecting millions\n‚Ä¢ 'Minor' code issues causing deploy disasters\n‚Ä¢ Security breaches from theoretical patterns\n\nEvery feature solves a real problem I've lived through.",
        "Install and try it:\n\n```bash\nnpm install -g @critical-claude/mcp\ncc --help\n```\n\nOr use the Claude Code integration:\n\n```json\n{\n  \"mcpServers\": {\n    \"critical-claude\": {\n      \"command\": \"critical-claude-mcp\"\n    }\n  }\n}\n```",
        "This is just the beginning.\n\nNext: Deploying to Cloudflare as a remote MCP server with OAuth.\n\n73 story points of brutal reality already planned out.\n\nWorking code beats perfect theory. Always.\n\n#BuildInPublic #CodeReview #AI"
      ]
    },
    "feature_threads": {
      "brutal_reviews": {
        "hook": "Your code reviews are too nice. üßµ",
        "content": "Critical Claude's brutal code reviews find problems that matter:\n\n‚ùå 'This violates SOLID principles'\n‚úÖ 'This will cause a memory leak under load'\n\n‚ùå 'Consider using dependency injection'\n‚úÖ 'This race condition will corrupt user data'\n\nReal problems only."
      },
      "pragmatic_architecture": {
        "hook": "Stop over-engineering your CLI tools. üßµ",
        "content": "Critical Claude's architecture analysis matches patterns to problem size:\n\n‚Ä¢ CLI tool with 100 users? Singletons are fine.\n‚Ä¢ Startup with 5 devs? Keep it simple.\n‚Ä¢ Enterprise with 100k users? Now we can talk patterns.\n\nContext matters."
      },
      "ai_planning": {
        "hook": "AI planning that's actually realistic. üßµ",
        "content": "Critical Claude's timeline generation:\n\n‚ùå 'Authentication: 2 days'\n‚úÖ 'Authentication: 12 days (OAuth edge cases, email verification, rate limiting, security hardening)'\n\nBrutal reality beats optimistic estimates."
      }
    }
  },
  "screenshot_themes": {
    "terminal_commands": {
      "theme": "matrix",
      "description": "Show CLI commands and brutal feedback in action",
      "examples": [
        "cc crit code src/auth.ts",
        "cc plan timeline 'chat app'",
        "cc explore ."
      ]
    },
    "code_reviews": {
      "theme": "synthwave",
      "description": "Display brutal code review output with specific issues",
      "focus": "CRITICAL and HIGH priority issues only"
    },
    "architecture_analysis": {
      "theme": "cyberpunk",
      "description": "Show architecture recommendations with context",
      "focus": "Right-sized solutions for actual team size"
    }
  },
  "hashtags": {
    "primary": ["#CriticalClaude", "#WorkingCodeBeats", "#BrutalReviews"],
    "secondary": ["#BuildInPublic", "#CodeReview", "#AI", "#MCP", "#ClaudeCode"],
    "contextual": ["#ProductionReady", "#TechDebt", "#RealProblems", "#PragmaticDev"]
  },
  "cta_variations": [
    "Try it: npm install -g @critical-claude/mcp",
    "Get brutal feedback: cc crit code your-file.ts",
    "See the brutal reality: cc plan timeline 'your feature'",
    "Stop the 3 AM pages: github.com/critical-claude/critical-claude"
  ],
  "anti_patterns": {
    "avoid": [
      "Marketing fluff about 'revolutionizing' development",
      "Theoretical computer science references",
      "Claims about 'perfect' code",
      "Generic 'boost productivity' messaging"
    ],
    "instead": [
      "Specific production problems solved",
      "Real-world battle-tested examples",
      "Honest limitations and trade-offs",
      "Practical immediate value"
    ]
  }
}
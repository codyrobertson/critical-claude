# Critical Claude MCP Configuration
# Battle-tested multipliers and settings from real production experience

[general]
# Log level: "error" | "warn" | "info" | "debug"
log_level = "info"

# Maximum files to process in codebase exploration
max_files = 50000

# Maximum file size in MB to analyze
max_file_size_mb = 10

# Maximum files per type to store in memory
max_files_per_type = 1000

# Maximum directory depth for exploration
max_directory_depth = 20

[web_search]
# Enable web search integration for fact-checking and vulnerability verification
enabled = false

# Exa API key (can also be set via EXA_API_KEY environment variable)
# exa_api_key = "your-api-key-here"

# Search depth: "basic" | "comprehensive"
search_depth = "basic"

# Enable fact-checking for recommendations
fact_checking = true

# Enable vulnerability scanning against CVE databases
vulnerability_scanning = true

[security]
# Allowed root paths for file access (glob patterns)
allowed_paths = [
  "~/code/**",
  "~/projects/**",
  "/tmp/**",
  "/Users/*/code/**",
  "/home/*/code/**"
]

# Blocked paths (always denied)
blocked_paths = [
  "/etc/**",
  "/System/**",
  "/Windows/**",
  "**/.ssh/**",
  "**/.aws/**",
  "**/node_modules/**"
]

[brutal_plan]
# Base multipliers for different feature types
# These are battle-tested from real projects
[brutal_plan.base_multipliers]
auth = 3.5          # Password reset, MFA, sessions, OAuth
payment = 5.0       # PCI compliance, webhooks, edge cases
search = 3.0        # Relevance, performance, filters
upload = 4.0        # Validation, storage, security, previews
realtime = 4.5      # WebSockets, reconnection, scaling
migration = 6.0     # Always goes wrong, needs rollback
api = 3.0           # Versioning, docs, rate limiting
dashboard = 3.5     # Filters, exports, real-time updates
integration = 4.0   # API changes, rate limits, error handling
notification = 3.5  # Email, SMS, preferences, unsubscribe
crud = 2.0          # Even simple CRUD has complexity
reporting = 3.5     # Data aggregation, performance, exports
admin = 3.0         # Permissions, audit logs, bulk operations
default = 2.5       # Everything takes 2.5x longer minimum

# Complexity factors that increase estimates
[brutal_plan.complexity_factors]
legacy_integration = 1.5    # Working with legacy systems
distributed = 1.4           # Distributed system challenges
high_scale = 1.3           # High scale requirements (>100k users)
realtime_sync = 1.3        # Real-time data synchronization
multi_tenant = 1.4         # Multi-tenancy requirements
offline_support = 1.3      # Offline-first functionality
pci_compliance = 1.5       # Payment card industry compliance
hipaa_compliance = 1.6     # Healthcare compliance
gdpr_compliance = 1.3      # GDPR requirements
sox_compliance = 1.4       # Financial compliance
security_critical = 1.4    # High security requirements
multiple_apis = 1.3        # 3+ external API integrations
unstable_apis = 1.5        # Known unstable third-party APIs
custom_protocol = 1.4      # Non-standard protocols
first_time_tech = 1.4      # Team's first time with this tech
remote_team = 1.2          # Fully remote team coordination
multiple_timezones = 1.3   # Team across 3+ timezones
junior_heavy = 1.5         # >50% junior developers
no_qa = 1.4               # No dedicated QA
vague_requirements = 1.5   # Poorly defined requirements
changing_requirements = 1.4 # Requirements likely to change
multiple_stakeholders = 1.3 # 3+ stakeholder groups
ui_heavy = 1.3            # Complex UI/UX requirements
algorithm_heavy = 1.4      # Complex algorithms needed

# Efficiency factors that decrease estimates
[brutal_plan.efficiency_factors]
existing_codebase = 0.8    # Can reuse existing code
well_documented_api = 0.9  # Excellent third-party docs
experienced_team = 0.85    # Team has done this before
simple_ui = 0.9           # Basic UI requirements
internal_only = 0.9        # Internal tool (less polish)
prototype_quality = 0.7    # Prototype/POC quality ok
no_migration = 0.85        # Greenfield, no data migration

# Team adjustment factors
[brutal_plan.team_adjustments]
solo_dev_multiplier = 1.3      # Single developer tax
deadline_pressure_multiplier = 1.2  # Deadline pressure tax

# Phase allocation (percentages must sum to 100)
[brutal_plan.phases]
research_percent = 20    # Research & hidden complexity discovery
implementation_percent = 50  # Core implementation
hardening_percent = 30   # Production hardening & testing

[critique]
# Severity thresholds for different system types
[critique.severity_thresholds.cli]
security_threshold = "medium"    # CLI tools have different security needs
performance_threshold = "low"    # Performance less critical
over_engineering_alert = true    # Watch for unnecessary complexity

[critique.severity_thresholds.web_small]
security_threshold = "high"      # Web apps need strong security
performance_threshold = "medium" # Performance matters
over_engineering_alert = true    # Don't overcomplicate small apps

[critique.severity_thresholds.web_large]
security_threshold = "critical"  # Large apps need maximum security
performance_threshold = "high"   # Performance is critical
over_engineering_alert = false   # Complex patterns may be justified

[critique.severity_thresholds.enterprise]
security_threshold = "critical"  # Enterprise needs all security
performance_threshold = "high"   # Performance always matters
over_engineering_alert = false   # Enterprise often needs complexity

# Code smell detection settings
[critique.code_smells]
max_function_lines = 50         # Functions longer than this are suspicious
max_file_lines = 500           # Files longer than this need splitting
max_cyclomatic_complexity = 10  # Complexity threshold
max_nesting_depth = 4          # Maximum nesting levels
min_test_coverage = 80         # Minimum test coverage percent

[architecture]
# Patterns to detect in codebase
[architecture.patterns]
mvc_indicators = ["controllers", "models", "views"]
ddd_indicators = ["domain", "services", "repositories", "aggregates"]
hexagonal_indicators = ["adapters", "ports", "application", "domain"]
microservices_indicators = ["api-gateway", "service-", "docker-compose"]
monolith_indicators = ["src", "app", "lib"]

# Anti-patterns to warn about
[architecture.anti_patterns]
small_app_microservices_threshold = 100  # Files count for microservices warning
large_app_no_structure_threshold = 1000  # Files count for structure warning
too_many_dependencies_threshold = 50     # Package count warning

[monitoring]
# Performance tracking
[monitoring.performance]
slow_operation_threshold_ms = 1000   # Operations slower than this are logged
memory_limit_mb = 512               # Memory usage warning threshold
cpu_threshold_percent = 80          # CPU usage warning threshold